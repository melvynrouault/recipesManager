let OK,CREATED,FORBIDDEN,UNAUTHORIZED,TEAPOT,INTERNAL_SERVER_ERROR,BAD_GATEWAY,BAD_REQUEST,NOT_FOUND,NOT_IMPLEMENTED,Xlog;_edd‍.x([["sendOK",()=>sendOK],["sendOKWithData",()=>sendOKWithData],["sendCreated",()=>sendCreated],["throwBadRequest",()=>throwBadRequest],["throwUnauthorized",()=>throwUnauthorized],["throwForbidden",()=>throwForbidden],["throwNotFound",()=>throwNotFound],["throwTeaPot",()=>throwTeaPot],["throwIntServerError",()=>throwIntServerError],["throwNotImplemented",()=>throwNotImplemented],["throwBadGateway",()=>throwBadGateway]]);_edd‍.w("./messages/validMessages",[["OK",["OK"],function(v){OK=v}],["CREATED",["CREATED"],function(v){CREATED=v}]]);_edd‍.w("./messages/aclMessages",[["FORBIDDEN",["FORBIDDEN"],function(v){FORBIDDEN=v}],["UNAUTHORIZED",["UNAUTHORIZED"],function(v){UNAUTHORIZED=v}]]);_edd‍.w("./messages/miscMessages",[["TEAPOT",["TEAPOT"],function(v){TEAPOT=v}]]);_edd‍.w("./messages/errorMessages",[["INTERNAL_SERVER_ERROR",["INTERNAL_SERVER_ERROR"],function(v){INTERNAL_SERVER_ERROR=v}],["BAD_GATEWAY",["BAD_GATEWAY"],function(v){BAD_GATEWAY=v}],["BAD_REQUEST",["BAD_REQUEST"],function(v){BAD_REQUEST=v}],["NOT_FOUND",["NOT_FOUND"],function(v){NOT_FOUND=v}],["NOT_IMPLEMENTED",["NOT_IMPLEMENTED"],function(v){NOT_IMPLEMENTED=v}]]);_edd‍.w("./Xlog",[["default",["Xlog"],function(v){Xlog=v}]]);/**
 ** Developed by Xcrowzz
 ** On 01/08/2019
 ** For project poc_newsletters
 ** Copyright (c) 2018-2019. All rights reserved.
 */










const X = new Xlog('xdk:XresHandler');

// 200
       const sendOK = (res) => {
  X.info(res);
  return res.status(200).send(OK);
};

       const sendOKWithData = (obj, res) => {
  X.info(JSON.stringify(obj));
  return res.status(200).send(obj);
};

       const sendCreated = (obj, res) => {
  X.info(obj);
  return res.status(201).send(CREATED);
};

// 400
       const throwBadRequest = (err, res) => {
  X.error(err);
  return res.status(400).send(BAD_REQUEST);
};

       const throwUnauthorized = (err, res) => {
  X.error(err);
  return res.status(401).send(UNAUTHORIZED);
};

       const throwForbidden = (err, res) => {
  X.error(err);
  return res.status(403).send(FORBIDDEN);
};

       const throwNotFound = (err, res) => {
  X.error(err);
  return res.status(404).send(NOT_FOUND);
};

       const throwTeaPot = (res) => {
  X.error(TEAPOT, 'INF');
  return res.status(418).send(TEAPOT);
};

// 500
       const throwIntServerError = (err, res) => {
  _edd‍.g.console.log('erreur ++++ ' + err);
  X.error(err);
  return res.status(500).send(INTERNAL_SERVER_ERROR);
};

       const throwNotImplemented = (err, res) => {
  X.error(NOT_IMPLEMENTED);
  return res.status(501).send(NOT_IMPLEMENTED);
};

       const throwBadGateway = (err, res) => {
  X.error(err);
  return res.status(502).send(BAD_GATEWAY);
};

/* module.exports = {
  sendOK,
  sendOKWithData,
  sendCreated,
  throwBadRequest,
  throwUnauthorized,
  throwForbidden,
  throwNotFound,
  throwTeaPot,
  throwIntServerError,
  throwNotImplemented,
  throwBadGateway,
}; */
