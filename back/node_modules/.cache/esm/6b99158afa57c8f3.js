let throwBadRequest,sendOK,sendOKWithData,sendCreated,throwIntServerError,utils,UserModel;_fa5‍.x([["registerUser",()=>registerUser],["logUser",()=>logUser],["deleteUser",()=>deleteUser],["getInfosUser",()=>getInfosUser],["editInfosUser",()=>editInfosUser],["getObjectivesUser",()=>getObjectivesUser],["editObjectivesUser",()=>editObjectivesUser],["addAlimentProducteur",()=>addAlimentProducteur],["getAlimentsProducteur",()=>getAlimentsProducteur]]);_fa5‍.w("../xdk/XresHandler",[["throwBadRequest",["throwBadRequest"],function(v){throwBadRequest=v}],["sendOK",["sendOK"],function(v){sendOK=v}],["sendOKWithData",["sendOKWithData"],function(v){sendOKWithData=v}],["sendCreated",["sendCreated"],function(v){sendCreated=v}],["throwIntServerError",["throwIntServerError"],function(v){throwIntServerError=v}]]);_fa5‍.w("../tools/utils",[["default",["utils"],function(v){utils=v}]]);_fa5‍.w("../models/userModel",[["default",["UserModel"],function(v){UserModel=v}]]);// import Xlog from '../tools/Xlog';
// import {throwBadRequest,  sendOK, sendOKWithData, sendCreated, throwIntServerError } from '../tools/XresHandler';




       const registerUser = async (req, res) => {
    if (!req.body.firstName || !req.body.lastName || !req.body.email || !req.body.pswd || !req.body.pswdConfirm) return throwBadRequest('Missing Parameters', res);
    if (!await utils.validateEmail(req.body.email)) return throwBadRequest('Wrong email format', res);
    if (!await utils.validatePassword(req.body.pswd)) return throwBadRequest('Wrong Password format must be: at least 3 char long with 1 uppercase 1 lowercase and 1 number', res);
    if (req.body.pswd != req.body.pswdConfirm) return throwBadRequest('Wrong password confirmation', res);
    await UserModel.createUser(req.body.firstName, req.body.lastName, req.body.email, req.body.pswd, (err, record) => {
        if (err) return throwIntServerError(err, res);
        return sendCreated(record, res);
    });
};

       const logUser = async (req, res) => {
    if (!req.body.email || !req.body.pswd) return throwBadRequest('Missing parameters', res);
    if (!await utils.validateEmail(req.body.email)) return throwBadRequest('Wrong email format', res);
    if (!await utils.validatePassword(req.body.pswd)) return throwBadRequest('Wrong password formatmust be: at least 3 char long with 1 uppercase 1 lowercase and 1 number', res);
    await UserModel.fetchUser(req.body.email, req.body.pswd, (err, result) => {
        if (err) return throwIntServerError(err, res);
        return sendOKWithData({ auth: true, token: result }, res);
    });
}

       const deleteUser = async function (req, res) {
    if (!req.body._id) return throwBadRequest('Missing parameters', res);
    await UserModel.deleteUser(req.body._id, (err, result) => {
        if (err) return throwIntServerError(err, res);
        return sendOK(res);
    })
}

       const getInfosUser = async (req, res) => {
    console.log(`PARAMS : ${JSON.stringify(req.params)}`);
    if (!req.params.id) return throwBadRequest('Missing parameters', res);
    await UserModel.getUser(req.params.id, (err, result) => {
        if (err) return throwIntServerError(err, res);
        return sendOKWithData({
            _id: result._id,
            firstName: result.firstName,
            lastName: result.lastName,
            email: result.userEmail,
        }, res)
    })
}


       const editInfosUser = async (req, res) => {
    if (!req.body._id || !req.body.firstName || !req.body.lastName || !req.body.email) return throwBadRequest('Missing parameters', res);
    await UserModel.updateUser(req.body._id, req.body.firstName, req.body.lastName, req.body.email, (err, result) => {
        if (err) return throwIntServerError(err, res);
        return sendOKWithData({
            _id: result._id,
            firstName: result.firstName,
            lastName: result.lastName,
            email: result.userEmail,
        }, res);
    });
    return null;
}


       const getObjectivesUser = async (req, res) => {
    if (!req.params.id) return throwBadRequest('Missing parameters', res);
    await UserModel.getUserWithData(req.params.id, (err, result) => {
        if (err) return throwIntServerError(err, res);
        return sendOKWithData({
            _id: result.id,
            poidsRechercher: result.objectives.weight,
        },res);
    });
    return null;
}


       const editObjectivesUser = async (req, res) => {
    if (!req.body._id || !req.body.objectives) return throwBadRequest('Missing Parameters', res);
    await UserModel.updateObjectivesUser(req.body._id, req.body.objectives, (err, result) => {
        if (err) return throwIntServerError(err, res);
        return sendOKWithData({
            _id: result._id,
            poidsRechercher: result.objectives.weight,
        }, res)
    });
    return null;
}


       const addAlimentProducteur = async (req, res) => {
    if (!req.body._id || !req.body.aliments) return throwBadRequest('Missing pameters', res);
    await UserModel.addAlimentProducteurModel(req.body._id, req.body.aliments, (err, result) => {
        if (err) return throwIntServerError(err, res);
        _fa5‍.g.console.log(result);
        return sendOKWithData({
            _id: result._id,
            firstName: result.firstName,
            lastName: result.lastName,
            alimentsProducteur: result.alimentsProducteur
        }, res);
    });
    return null;
}

       const getAlimentsProducteur = async (req, res) => {
    if (!req.body._id) return throwBadRequest('Missing parameters', res);
    await UserModel.getAlimentsProducteurModel(req.body._id, (err, result) => {
        if (err) return throwIntServerError(err, res);
        console.log(` RESULT GET Alim : ${result}`)
        return sendOKWithData({
            alimentsProducteur: result.alimentsProducteur
        }, res)
    })
}
// module.exports = {
//     registerUser,
// }
